oracle的体系结构
用户->sql->用户进程->服务进程

用户->start实例->oracle自动为sga分配内存\启动后台进程->用户访问实例->实例访问数据
用户->shutdown实例->操作系统负责回收内存

oracle database server
	实例Instance->内存(SGA)+进程
		内存结构
			数据库高速缓冲区 database buffer cache
				分类:
					脏缓冲区dirty buffer 	
						发生DML操作的缓冲区,脏列表
					自由缓冲区free buffer	
						当'脏缓冲区'的内容被写入数据文件后,因为该缓冲区与相应数据文件部分内容一致
					忙缓冲区 pinned buffer 	
						服务器进程正在访问的缓冲区
				缓存最近从数据库中读了的数据块,并可供其它客户进行进程共享
				非标准块大小的支持
				Oracle 用LRU（Least Recently Used）算法来管理数据高速缓冲区（原理请参考ORACLE服务器组成.pdf p9）	
			重做日志缓冲区 redo log buffer
				用来记录对数据缓冲区数据进行的修改,可以循环使用
				在系统发生故障时,可能通过重做项重新执行对数据库的修改,实现对实例的恢复.
				重做日志缓冲区大小 show parameter LOG_BUFFER
				过程：
					用户->DML(insert,update,delete)/DDL(create,alter,drop)->
					oracle会自动生成重做项->
					这些缓冲区的变化记载到重做日志缓冲区->
					改变数据高速缓存中的相应缓冲区。
					重做日志缓冲区填满->重做日志缓冲区的内容写入日志文件
				每条重做项记载了修改的时间、被修改的块、修改位置以及新数据
				
			共享池 share pool(shared_pool_size)
				库缓存library cache
					共享sql、共享pl/sql
				数据字典缓冲区dictionary cache
					保存的数据的参数信息,(如数据库结构,用户)的表和视图
				show parameter shared_pool_size
			Java 池（Java Pool）
			大池（Large Pool）
			流池（Stream Pool）
			多个缓冲区
				数据库管理员（DBA ）可以通过创建多个缓冲池来提高数据库缓冲区高速缓存的性能。
				用户可以指定方案对象（schema object）（表，簇，索引，及分区）使用相应的缓冲池，以便控制数据被移出缓存区的时机。
				分类：
					保留缓冲区keep buffer cache	
						用来保留在内存中最有可能保存的对象
						show parameter db_keep_cache_size
					循环缓冲区recycle buffer cache	
						用在保留在内存重用机会不大的内存块
						show parameter DB_RECYCLE_CACHE_SIZE
					默认的缓冲区default buffer cache	
						此池始终存在,相当于一个实例数据库高速缓冲区保存和循环区以外的部分
						show parameter DB_CACHE_SIZE
		进程processes:
			LGWR:DBWR工作之前，1/3,>1M,每隔3s,commit
			DBWn(db_writer_processes):ckpt、脏缓冲达到阀值、搜索数据块找不到自由缓冲区、数据写入时间到、表空脱机或进入只读状态、执行删除或截断表，alter tablespace...begin backup
			CKPT(checkpoint):scn(system change number)　日志切换、关闭实例、手工执行ckpt,参数时间到(log_checkpoint_interval,log_checkpoint_timeout)
			smon(system monitor):强制对数据库进行恢复操作，主要工作实例恢复，合并数据文件的自由空间，释放数据文件的临时段
			pmon(process monitor):负责对失败的用户进程或服务进程进行恢复，主要工作回滚当前用户的事务，释放当前用户加的表或行级锁，释放用户的其它资源，重新启动死掉的调度进程
			ARCn归档进程(Archive)：完成日志的归档备份
			RECO恢复进程（recover）：负责在分布式数据（distributed database）环境下，自动恢复失败的分布式事务。
			Dnnnn调度进程
	程序全局区pga(pragram global area或process global area)	执行检查点，同步数据库中所有的数据文件，重做日志文件，控制文件
		当建立服务进程或后台进程时，oracle会自动为其分配pga
		私有sql区（private sql area）包括绑定信息以及运行时的内存结构
			游标的私有sql区
				持续数据区persistent area
				运行时间区run-time area
		会话内存
		sql工作区
	database->存储数据
		数据文件data file
			用于存放数据的数据文件（DataFiles）
		日志文件log file
			用于保护数据不丢失的联机重做日志文件（Online Redolog Files）
				记录了用户对数据的各项操作，用于保护数据不丢失。
				以日志组的形式存在。
				每个Oracle 数据库至少包含两个日志组。
		控制文件control file
			用于连接Oracle 实例和数据库所需要的控制文件（Control Files）。
				记录了数据库的各项信息
				是连接Oracle 实例和Oracle 数据库的桥梁
				每个Oracle 数据库包含1-8 个控制文件
		
其它文件(颈椎口参鬼)
	参数文件
		记录了Oracle 实例的各项信息。
		分为动态和静态初始化参数文件。
	口令文件
		存放特定用户的口令。
	归档日志
		相当于联机重做日志文件的备份，用于保护数据不丢失。
	警告文件
		警告文件由连续的消息和错误组成。
		可以查看到Oracle 内部错误、块损坏错误以及非默认的初始化参数值等。
	追踪文件
		存放后台进程和服务器进程的跟踪信息。

自动共享管理内存asmm(automatic shared memory management)
	10g设置sga总容量大小sga_target(sga)、sga_max_size,11g为memory_target（sga+pga）、memory_max_target
	statistics_level设置为typical、all否则为basic则关闭asmm
	可以自动调整5个池: 
		shared pool(shared_pool_size)
		buffer cache(db_cache_size)
		large pool(large_pool_size)
		java pool(java_pool_size)
		stream pool(streams_pool_size)
	mman(Memory manager)
		每隔一段时间，mman进程自动启动，然后去询问oracle提供的各个内存组件顾问，将自动调整的内存池，建议的大小返回给mman.
		spfile
重要的进程
1. LGWR(log writer)
database cache buffer	data file		LGWR
redo log buffer			redo log file	DBWR



su - oracle
sqlplus / as sysdba
Connected to an idle instance.表示实例没有启动
select * from stu;   
ORA-01034: ORACLE not available表示实例没有启动

cd $ORACLE_HOME
/u01/app/oracle/diag/rdbms/orcl/orcl/trace
tail -200f alert_orcl.log
startup nomount仅仅启动实例
startup

$ pwd
/u01/app/oracle/diag/rdbms/orcl/orcl/trace
tail -200f alert_orcl.log 

小知识:
1.　数据块是数据库IO的最小单位
	标准块大小 show parameter db_block_size 8K
	标准大小块的缓存尺寸由参数DB_CACHE_SIZE 的值决定
	查看非标准块块大小 db_nk_cache_size
2. 重做项:记载了修改的时间,修改的块,修改位置,以及新数据	
3.　show sga
	数据库高速缓冲区Database Buffers	348M
	重做日志缓冲区Redo Buffers	5M
4.　
	动态性能视图
		v$database
		v$instance
		v$sga
	数据字典,被存在system表空间的数据文件中,包括账号,数据文件,表的描述,权限
	为了提高效率,专门为它分配了内存空间,就是数据字典高速缓冲区
		dba_*	数据库中所有对象的信息
		user_*	当前用户所拥有对象的信息
		all_*	当前用户可访问对象的信息
	desc dba_users;
	select username from dba_users;
	create user u01 identified by oracle;
	select username from dba_users;
5.　show parameter open_cursors
6.查看进程
	ps -ef ||grep ora_
	select name from v$bgprocess where paddr!='00';
7. 查看scn
select current_scn from v$database;	
/表示重复上面的语句
Question:
1. windows下SecureCRT无法使用backspace（空格键）和上下左右键
	先打开Options–>Session Options–>Terminal–>Emulation(中文：选项–>回话选项–>终端–>仿真) 界面下 ：
	1.终端(T):选择Linux，默认为VT100.
	2.ANSI颜色(A)打上勾。
	然后打开Options–>Session Options–>Terminal–>Emulation–>Mapped Keys(中文：选项–>回话选项–>终端–>仿真–>映射键)
	选中复选框  （Backspace sends delete、  Delete sends backspace）
2. SecureCRT中解决SQLPLUS上下左右键问题
	1.开始没有安装readline-devel-5.1-3.el5.i386.rpm，导致在安装rlwrap-0.30.tar.tar时./configure报错，同时在安装readline-devel-5.1-3.el5.i386.rpm前需要先安装libtermcap-devel-2.0.8-46.1.i386.rpm
		cd /mnt/Server/
		先按照如下顺序安装3个rpm文件
		rpm -ivh readline-5.1-3.el5.i386.rpm
		rpm -ivh libtermcap-devel-2.0.8-46.1.i386.rpm
		rpm -ivh readline-devel-5.1-3.el5.i386.rpm
		或直接　yum install readline
	2. 下载安装包rlwrap: rlwrap-0.37.tar.gz
		免费下载地址在 http://linux.linuxidc.com/
		用户名与密码都是www.linuxidc.com
		具体下载目录在 /pub/2011/07/04/rlwrap/
		下载rlwrap-0.37.tar.gz
	3. install rlwrap：
	   # tar -xzvf rlwrap-0.37.tar.gz
	   # cd rlwrap-0.37
	   # ./configure 
	   # make
	   # make check
	   # make install

	4. 使用
	   切换到oracle用户，编辑.bash_profile文件，
	   #su - oracle
	   #vi .bash_profile
	   在后边加上如下内容：
		  alias sqlplus='rlwrap sqlplus'
		  alias rman='rlwrap rman'
		  stty erase ^h 
3.　极点五笔特殊符号输入方法
	Ctrl+．	* 中/英文标点	  
Reference:
http://www.linuxidc.com/Linux/2011-07/38076.htm	  

下载官方文档
打开oracle的help center，如果找不到网址，可以输入oracle help center，百度搜索。
击这里选择需要下在的文档是oracle还是其他产品，本文以oracle的database产品进行说明。
这里会把我们引入到一个refine的search页面
http://docs.oracle.com/cd/E11882_01/index.html



实验：查询 SGA 的大小
SQL> show parameter sga

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
lock_sga                             boolean     FALSE
pre_page_sga                         boolean     FALSE
sga_max_size                         big integer 812M
sga_target                           big integer 0

SQL> select * from v$sga;

NAME                      VALUE
-------------------- ----------
Fixed Size              1348244
Variable Size         499125612
Database Buffers      343932928
Redo Buffers            5124096

SQL> show parameter sga_target

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
sga_target                           big integer 0
--显示 SGA 最大值
SQL> show parameter sga_max_size

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
sga_max_size                         big integer 812M
--Linux查看sga的样子
[root@oel ~]# ipcs -m | grep ora
0x00000000 917513     oracle    640        4096       0                       
0x00000000 950282     oracle    640        4096       0                       
0xd3ac6c80 983051     oracle    640        4096       0  

SQL> select pool,name,bytes from v$sgastat order by pool,name;

SQL> select * from v$sgainfo;

NAME                                  BYTES RES
-------------------------------- ---------- ---
Fixed SGA Size                      1348244 No
Redo Buffers                        5124096 No
Buffer Cache Size                 343932928 Yes
Shared Pool Size                  146800640 Yes
Large Pool Size                     4194304 Yes
Java Pool Size                      4194304 Yes
Streams Pool Size                         0 Yes
Shared IO Pool Size                       0 Yes
Granule Size                        4194304 No
Maximum SGA Size                  849530880 No
Startup overhead in Shared Pool    58403900 No

NAME                                  BYTES RES
-------------------------------- ---------- ---
Free SGA Memory Available         343932928

12 rows selected.
SQL> show parameter sga_target

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
sga_target                           big integer 0
SQL> show parameter memory_target

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
memory_target                        big integer 812M

实验：查询块大小
数据库块是Oracle 数据库I/O 的最小单位。
每个数据库都可以通过参数DB_BLOCK_SIZE 指定标准块大小（2k、4k、8k、16k、32k），默认为8k
SQL> show parameter db_block_size

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
db_block_size                        integer     8192


实验：
保留缓冲区和循环缓冲区并非默认缓冲区的子集。可以使用BUFFER_POOL 子句对对象定义默认的缓冲区。
EXAMPLE:
CREATE INDEX cust_idx …
STORAGE (BUFFER_POOL KEEP);
ALTER TABLE oe.customers
STORAGE (BUFFER_POOL RECYCLE);


实验：

[oracle@oel ~]$ sqlplus / as sysdba　--连接数据库
SQL> show parameter db_cache_size --显示数据库高速缓冲区的大小

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
db_cache_size                        big integer 0

SQL> show parameter db_keep_cache_size --显示保留缓冲区的大小

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
db_keep_cache_size                   big integer 0

SQL> show parameter db_recycle_cache_size --显示循环缓冲区的大小

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
db_recycle_cache_size                big integer 0


SQL> ALTER SYSTEM SET db_cache_size=500m; --修改数据库高速缓冲区的大小 失败????

SQL> alter system flush buffer_cache; --清空数据库高速缓冲区

System altered.

实验：
--禁用自动内存管理
alter system set memory_target = 0 scope=both;

--禁用SGA自动内存管理
alter system set sga_target=0 scope=both;

实验：
--查看进程
 ps -ef | grep ora
 SQL> select paddr,name,description from v$bgprocess where paddr!='00';

PADDR    NAME  DESCRIPTION
-------- ----- ----------------------------------------------------------------
52BD2CA4 PMON  process cleanup
52BD42EC VKTM  Virtual Keeper of TiMe process
52BD4E10 GEN0  generic0
52BD5934 DIAG  diagnosibility process
52BD6458 DBRM  DataBase Resource Manager
52BD37C8 PSP0  process spawner 0
52BD6F7C DIA0  diagnosibility process 0
52BD7AA0 MMAN  Memory Manager
52BD85C4 DBW0  db writer process 0
52BD90E8 LGWR  Redo etc.
52BD9C0C CKPT  checkpoint

PADDR    NAME  DESCRIPTION
-------- ----- ----------------------------------------------------------------
52BDA730 SMON  System Monitor Process
52BDEA08 SMCO  Space Manager Process
52BDB254 RECO  distributed recovery
52BE21BC CJQ0  Job Queue Coordinator
52BDF52C QMNC  AQ Coordinator
52BDBD78 MMON  Manageability Monitor Process
52BDC89C MMNL  Manageability Monitor Process 2

18 rows selected.
SQL> show parameter proc

NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
aq_tm_processes                      integer     1
cell_offload_processing              boolean     TRUE
db_writer_processes                  integer     1
gcs_server_processes                 integer     0
global_txn_processes                 integer     1
job_queue_processes                  integer     1000
log_archive_max_processes            integer     4
processes                            integer     150
processor_group_name                 string

--调整数据写进程个数
SQL> alter system set db_writer_processes=1 scope=spfile;

--检查点
SQL> show parameter log_checkpoint
NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
log_checkpoint_interval              integer     0
log_checkpoint_timeout               integer     1800
log_checkpoints_to_alert             boolean     FALSE

12/28